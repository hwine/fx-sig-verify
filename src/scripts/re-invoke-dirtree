#!/usr/bin/env bash
set -eu

# defaults set so can be used in usage message
dry_run=false
debug=false
s3_bucket="${s3_bucket:-net-mozaws-prod-delivery-firefox}"
key_prefix="${key_prefix:-pub/firefox}"
function_name="${function_name:-fx-sig-verify-prod}"
function_region="${function_region:-us-east-1}"
no_key_prefix="false"

USAGE="usage: ${0##*/} [options] prefix...
Invoke the lambda function for all exe files under prefix.

Arguements:
    prefix      The key path under ${key_prefix} to search

Options:
    --help -h       this help message
    --debug         save temp directory
    --dry-run -n    do not invoke, just show commands
    --no-key-prefix don't use $key_prefix as prefix
"

# many of the fields in the record do not need to be accurate
# the lambda function only needs bucket & key, however the full event is
# echoed to the cloud watch log, so we modify some to identify a re-try
# N.B. - single quotes are used in template to allow bash interpolation.
#        they are converted to double quotes (legal JSON) prior to
#        transmission
invoke_template='
{
  "Records": [
    {
      "eventVersion": "2.0",
      "eventTime": "1970-01-01T00:00:00.000Z",
      "requestParameters": {
        "sourceIPAddres": "127.0.0.1"
      },
      "s3": {
        "configurationId": "manualEvent",
        "object": {
          "eTag": "0123456789abcdef0123456789abcdef",
          "sequencer": "0A1B2C3D4E5F678901",
          "key": "%%s3_object_key%%",
          "size": 1024
        },
        "bucket": {
          "arn": "arn:aws:s3:::mybucket",
          "name": "%%s3_object_bucket%%",
          "ownerIdentity": {
            "principalId": "EXAMPLE"
          }
        },
        "s3SchemaVersion": "1.0"
      },
      "responseElements": {
        "x-amz-id-2": "EXAMPLE123/5678abcdefghijklambdaisawesome/mnopqrstuvwxyzABCDEFGH",
        "x-amz-request-id": "EXAMPLE123456789"
      },
      "awsRegion": "us-east-1",
      "eventName": "ObjectCreated:Put",
      "userIdentity": {
        "principalId": "EXAMPLE"
      },
      "eventSource": "aws:s3"
    }
  ]
}'

warn() { for m; do echo "$m"; done 1>&2 ; }
die() { warn "$@"; exit 2; }
usage() { warn "$@" "$USAGE"; test $#; exit $?; }

while [[ $# -gt 0 ]]; do
    case "$1" in
        --help|-h) usage ;;
        --dry-run|-n) dry_run=true ;;
        --debug) debug=true ;;
        --no-key-prefix) no_key_prefix=true ;;
        -*) usage "Unknown option '$1'" ;;
        *) break ;;
    esac
    shift
done

[[ $# -eq 0 ]] && usage "Missing prefixes"

tmp_dir=$(mktemp -d "/tmp/${0##*/}-$USER-XXXXXX")
trap '$debug && echo "DEBUG files in $tmp_dir" || rm -rf $tmp_dir' EXIT

list_exes() {
    local sub_key="$1"
    local s3url
    local -a listing
    if $no_key_prefix; then
        s3url="s3://$s3_bucket/$sub_key/"
    else
        s3url="s3://$s3_bucket/$key_prefix/$sub_key/"
    fi
    # special case single file - no slash if ends in .exe
    if [[ ${sub_key: -4} == ".exe" ]]; then
        s3url="${s3url:0:-1}"
        warn "Looking for single file"
    fi
    aws s3 ls --recursive "$s3url" |
        # in a subshell
        while read -ra listing; do
            f_name="${listing[-1]}"
            [[ ${f_name: -4} == ".exe" ]] &&
                echo "${listing[@]:3}"
        done
}

make_template_file() {
    local key_name="$1"
    local template_file="$tmp_dir/${key_name//[\/ ]/-}.json"
    # map to names used in template
    local s3_object_bucket=$s3_bucket
    local s3_object_key="$key_name"
    if [[ -e $template_file ]]; then
        local orig_file="$template_file"
        template_file=$(mktemp "$orig_file.XXXXXX")
        warn "Duplicate key name: $orig_file" "using: $template_file"
    fi
    local json
    json="$(echo "${invoke_template}" |
                  sed -e "s,%%s3_object_bucket%%,$s3_object_bucket,g" \
                      -e "s,%%s3_object_key%%,$s3_object_key,g")"
    # convert to json, assuming no quotes
    echo "$json" > "$template_file"
    echo "$template_file"
}

invoke() {
    local line
    local
    while read -r line ; do
        local input_json output_json
        input_json=$(make_template_file "$line")
        output_json="$input_json.out.json"
        if $dry_run; then
            echo "would process '$line'"
        else
            aws lambda invoke \
                --region "$function_region" \
                --function-name "$function_name" \
                --payload "$(cat "$input_json")" \
                "$output_json"  ; \
            if test -s "$output_json"; then \
                jq . "$output_json"; \
            fi
        fi
    done
}


echo "Processing in account ${AWS_DEFAULT_PROFILE:-${ASSUME_AWS_ROLE:-<unknown>}}"
for prefix in "$@"; do
    list_exes "$prefix" |
    invoke
done
